[{"D:\\PROJECTS\\react-app\\src\\index.js":"1","D:\\PROJECTS\\react-app\\src\\App.js":"2","D:\\PROJECTS\\react-app\\src\\reportWebVitals.js":"3","D:\\PROJECTS\\react-app\\src\\hooks\\useInterval.js":"4","D:\\PROJECTS\\react-app\\src\\pages\\Alarm.js":"5","D:\\PROJECTS\\react-app\\src\\pages\\AlarmCreate.js":"6","D:\\PROJECTS\\react-app\\src\\pages\\AlarmHead.js":"7","D:\\PROJECTS\\react-app\\src\\pages\\AlarmRead.js":"8","D:\\PROJECTS\\react-app\\src\\pages\\AlarmUpdate.js":"9","D:\\PROJECTS\\react-app\\src\\pages\\Nav.js":"10","D:\\PROJECTS\\react-app\\src\\pages\\Main.js":"11","D:\\PROJECTS\\react-app\\src\\pages\\TimerButton.js":"12","D:\\PROJECTS\\react-app\\src\\pages\\StopWatch.js":"13","D:\\PROJECTS\\react-app\\src\\pages\\StopWatchTimer.js":"14","D:\\PROJECTS\\react-app\\src\\pages\\StopWatchRecent.js":"15"},{"size":649,"mtime":1673505310493,"results":"16","hashOfConfig":"17"},{"size":568,"mtime":1675236449544,"results":"18","hashOfConfig":"17"},{"size":362,"mtime":1671441037548,"results":"19","hashOfConfig":"17"},{"size":501,"mtime":1674121639918,"results":"20","hashOfConfig":"17"},{"size":1917,"mtime":1673594593339,"results":"21","hashOfConfig":"17"},{"size":2795,"mtime":1674644777248,"results":"22","hashOfConfig":"17"},{"size":4986,"mtime":1673620228725,"results":"23","hashOfConfig":"17"},{"size":5524,"mtime":1675064153741,"results":"24","hashOfConfig":"17"},{"size":4292,"mtime":1673952939578,"results":"25","hashOfConfig":"17"},{"size":391,"mtime":1674643979634,"results":"26","hashOfConfig":"17"},{"size":7173,"mtime":1675067509880,"results":"27","hashOfConfig":"17"},{"size":187,"mtime":1674562684674,"results":"28","hashOfConfig":"17"},{"size":1466,"mtime":1674632142787,"results":"29","hashOfConfig":"17"},{"size":8598,"mtime":1675065239229,"results":"30","hashOfConfig":"17"},{"size":4229,"mtime":1674818358501,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"l2c9cc",{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","suppressedMessages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","suppressedMessages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","suppressedMessages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56"},{"filePath":"57","messages":"58","suppressedMessages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","suppressedMessages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","suppressedMessages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","suppressedMessages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","suppressedMessages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","suppressedMessages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","suppressedMessages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\PROJECTS\\react-app\\src\\index.js",[],[],"D:\\PROJECTS\\react-app\\src\\App.js",[],[],"D:\\PROJECTS\\react-app\\src\\reportWebVitals.js",[],[],"D:\\PROJECTS\\react-app\\src\\hooks\\useInterval.js",[],[],"D:\\PROJECTS\\react-app\\src\\pages\\Alarm.js",[],[],"D:\\PROJECTS\\react-app\\src\\pages\\AlarmCreate.js",[],[],"D:\\PROJECTS\\react-app\\src\\pages\\AlarmHead.js",[],[],"D:\\PROJECTS\\react-app\\src\\pages\\AlarmRead.js",["78"],[],"import React, { useEffect } from 'react';\r\nimport db from '../data/data.json';\r\n\r\nfunction AlarmRead(props) {\r\n    // const [hour, setHour] = useState(props.hour);\r\n    // const [min, setMin] = useState(props.min);\r\n    // console.log(hour, min);\r\n\r\n    //알람 항목들 상태 조회\r\n    useEffect(() => {\r\n        dataSet();\r\n    }, [])\r\n\r\n    //알람 상태 현재시간에 맞춰서 최신화\r\n    function dataSet() {\r\n        const date = new Date();\r\n        const dateHour = date.getHours();\r\n        const dateMin = date.getMinutes();\r\n        for (let i = 0; i < db.alarm.length; i++) {\r\n            if (Number(db.alarm[i].hour) > dateHour) {\r\n                fetchingOver(i + 1, false);\r\n\r\n            } else if (Number(db.alarm[i].hour) < dateHour) {\r\n                fetchingOver(i + 1, true);\r\n\r\n            } else if (Number(db.alarm[i].hour) === dateHour) {\r\n                if (Number(db.alarm[i].min) > dateMin) {\r\n                    fetchingOver(i + 1, false);\r\n\r\n                } else if (Number(db.alarm[i].min) < dateMin) {\r\n                    fetchingOver(i + 1, true);\r\n\r\n                } else {\r\n                    fetchingOver(i + 1, true);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n\r\n    //리스트 상태 변경 액션\r\n    function fetchingOver(id, status) {\r\n        fetch(`http://localhost:3001/alarm/${id}`, {\r\n            method: \"PATCH\",\r\n            headers: { \"Content-Type\": \"application/json\" },\r\n            body: JSON.stringify({\r\n                over: status\r\n            })\r\n        })\r\n    }\r\n\r\n\r\n    //삭제 버튼 이벤트\r\n    function delEvent(id) {\r\n        if (window.confirm(\"삭제하시겠습니까?\")) {\r\n            fetch(`http://localhost:3001/alarm/${id}`, {\r\n                method: \"DELETE\",\r\n            })\r\n                .then((res) => {\r\n                    if (res.ok) {\r\n                        alert(\"삭제되었습니다.\")\r\n                    }\r\n                })\r\n        }\r\n    }\r\n\r\n    //숫자 정리하기 위한 코드\r\n    let alData = [];\r\n    for (let i = 0; i < db.alarm.length; i++) {\r\n        alData.push(db.alarm[i]);\r\n    }\r\n    //시간순으로 리스트 정렬\r\n    alData.sort((a, b) => {\r\n        return a.hour - b.hour;\r\n    });\r\n    alData.sort((a, b) => {\r\n        if (a.hour === b.hour) {\r\n            return a.min - b.min;\r\n        } else {\r\n            return 0;\r\n        }\r\n    });\r\n    let notOverList = [];\r\n    for (let i = 0; i < alData.length; i++) {\r\n        if (alData[i].over === false) {\r\n            notOverList.push(alData[i]);\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n    // let notOver = [];\r\n    // let isOver = [];\r\n    // for (let i = 0; i < alData.length; i++) {\r\n    //     if (alData[i].over === false) {\r\n    //         notOver.push(\r\n    //             {\r\n    //                 \"id\": db.alarm[i].id,\r\n    //                 \"memo\": db.alarm[i].memo,\r\n    //                 \"hour\": (db.alarm[i].hour < 10 ? `0${db.alarm[i].hour}` : db.alarm[i].hour),\r\n    //                 \"min\": (db.alarm[i].min < 10 ? `0${db.alarm[i].min}` : db.alarm[i].min)\r\n    //             }\r\n    //         )\r\n    //     } else if (alData[i].over === true) {\r\n    //         isOver.push(\r\n    //             {\r\n    //                 \"id\": db.alarm[i].id,\r\n    //                 \"memo\": db.alarm[i].memo,\r\n    //                 \"hour\": (db.alarm[i].hour < 10 ? `0${db.alarm[i].hour}` : db.alarm[i].hour),\r\n    //                 \"min\": (db.alarm[i].min < 10 ? `0${db.alarm[i].min}` : db.alarm[i].min)\r\n    //             }\r\n    //         )\r\n    //     }\r\n    // }\r\n\r\n    useEffect(() => {\r\n        if (notOverList.length > 0) {\r\n            props.getRingData(notOverList[0].hour, notOverList[0].min, notOverList[0].memo, notOverList[0].id, notOverList[0].over);\r\n        } else {\r\n            props.getRingData(undefined, undefined, undefined, undefined, undefined);\r\n        }\r\n    },)\r\n\r\n    return (\r\n        <section id=\"alarmRead\">\r\n            <div>\r\n                <button type=\"button\" onClick={(event) => {\r\n                    event.preventDefault();\r\n                    props.goCreate();\r\n                }}>+ADD</button>\r\n            </div>\r\n\r\n            <div className=\"alarmReadMapContainer\">\r\n                {alData.map((data) => ( //map에 쓰인 인자 data는 db.alarm이 됨. db.alarm의 갯수(length)만큼 생성.\r\n                    <div key={data.id} className={data.over ? 'overed alarmObject flex' : 'alarmObject flex'}>\r\n                        <div className='titleAndTime'>\r\n                            {data.memo === '' ? '' : <strong>{data.memo}</strong>}\r\n                            <span>{data.hour < 10 ? `0${data.hour}` : data.hour}:{data.min < 10 ? `0${data.min}` : data.min}</span>\r\n                        </div>\r\n                        <div className='buttonGroup'>\r\n                            <button type=\"button\" onClick={(event) => {\r\n                                event.preventDefault();\r\n                                props.goData(data);\r\n                                props.goUpdate();\r\n                            }}>EDIT</button>\r\n                            <button type=\"button\" onClick={(event) => {\r\n                                event.preventDefault();\r\n                                delEvent(data.id);\r\n                            }}\r\n                            >DELETE</button>\r\n                        </div>\r\n                    </div>\r\n                ))}\r\n            </div>\r\n        </section >\r\n    )\r\n}\r\n\r\nexport default AlarmRead","D:\\PROJECTS\\react-app\\src\\pages\\AlarmUpdate.js",[],[],"D:\\PROJECTS\\react-app\\src\\pages\\Nav.js",[],[],"D:\\PROJECTS\\react-app\\src\\pages\\Main.js",[],[],"D:\\PROJECTS\\react-app\\src\\pages\\TimerButton.js",[],[],"D:\\PROJECTS\\react-app\\src\\pages\\StopWatch.js",[],[],"D:\\PROJECTS\\react-app\\src\\pages\\StopWatchTimer.js",[],[],"D:\\PROJECTS\\react-app\\src\\pages\\StopWatchRecent.js",[],[],{"ruleId":"79","severity":1,"message":"80","line":12,"column":8,"nodeType":"81","endLine":12,"endColumn":10,"suggestions":"82"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dataSet'. Either include it or remove the dependency array.","ArrayExpression",["83"],{"desc":"84","fix":"85"},"Update the dependencies array to be: [dataSet]",{"range":"86","text":"87"},[320,322],"[dataSet]"]