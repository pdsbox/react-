{"ast":null,"code":"var _jsxFileName = \"D:\\\\PROJECTS\\\\react-app\\\\src\\\\pages\\\\AlarmHead.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport useInterval from '../hooks/useInterval.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction AlarmHead(props) {\n  _s();\n  const date = new Date();\n  let hour = date.getHours();\n  let minute = date.getMinutes();\n  let second = date.getSeconds();\n  let day = date.getDate();\n  let month = date.getMonth();\n  let year = date.getFullYear();\n  const [now_hour, setHour] = useState(hour);\n  const [now_min, setMinute] = useState(minute);\n  const [now_second, setSecond] = useState(second);\n  const [now_day, setDay] = useState(day);\n  const [now_month, setMonth] = useState(month + 1);\n  const [now_year, setYear] = useState(year);\n  const [swc, setSwc] = useState(true);\n  const ringHour = props.ringHour === false ? props.ringHour : Number(props.ringHour);\n  const ringMin = props.ringMin === false ? props.ringMin : Number(props.ringMin);\n  const ringMemo = props.ringMemo;\n  let chkTimeHour = null;\n  let chkTimeMin = null;\n  let content = null;\n  if (now_min > ringMin) {\n    chkTimeHour = now_hour === 0 ? ringHour - (now_hour + 1) : ringHour - now_hour;\n    chkTimeMin = 60 + ringMin - now_min;\n    setSwc(true);\n    content = `다음 알람 : ${chkTimeHour}시간 ${chkTimeMin}분 후에 ${ringMemo}알람이 실행됩니다.`;\n  } else if (now_min < ringMin) {\n    chkTimeHour = ringHour - now_hour;\n    chkTimeMin = ringMin - now_min;\n    setSwc(true);\n    content = `다음 알람 : ${chkTimeHour}시간 ${chkTimeMin}분 후에 ${ringMemo}알람이 실행됩니다.`;\n  } else if (swc && now_hour === ringHour && now_min === ringMin) {\n    match();\n    setSwc(false);\n  } else {\n    content = \"울릴 알람이 없습니다. 알람을 설정해 주세요.\";\n  }\n  // } else if ((Number(ringHour) - now_hour) <= 1) { //설정한 시간과 현재시간이 같으면\n  //     chkTimeHour = 0;\n  //     chkTimeMin = Number(ringMin) - now_min;\n  //     content = `다음 알람 : ${chkTimeHour}시간 ${chkTimeMin}분 후에 ${ringMemo}알람이 실행됩니다.`;\n  // } else if ((Number(ringHour) - now_hour >= 1)) {\n  //     chkTimeHour = Number(ringHour) - now_hour;\n  //     // chkTimeMin = Number(ringMin) > now_min ? Number(ringMin) - now_min : now_min - Number(ringMin);\n  //     chkTimeMin = Number(ringMin) > now_min ? Number(ringMin) - now_min : 60 - now_min - Number(ringMin);\n\n  //     content = `다음 알람 : ${chkTimeHour}시간 ${chkTimeMin}분 후에 ${ringMemo}알람이 실행됩니다.`;\n\n  function match() {\n    fetch(`http://localhost:3001/alarm?memo=${ringMemo}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        over: true\n      })\n    }).then(res => {\n      res.json();\n    }).then(() => {\n      window.alert(\"알람!!!\" + ringMemo);\n    });\n  }\n  useInterval(() => {\n    const date = new Date();\n    let hour = date.getHours();\n    let minute = date.getMinutes();\n    let second = date.getSeconds();\n    let day = date.getDate();\n    let month = date.getMonth();\n    let year = date.getFullYear();\n    setHour(hour);\n    setMinute(minute);\n    setSecond(second);\n    setDay(day);\n    setMonth(month + 1);\n    setYear(year);\n  }, 1000);\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    id: \"alarmHead\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"ALARM\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"\\uD604\\uC7AC \\uC2DC\\uAC01 : \", now_year, \".\", now_month, \".\", now_day, \" \", now_hour < 10 ? `0${now_hour}` : now_hour, \":\", now_min < 10 ? `0${now_min}` : now_min, \":\", now_second < 10 ? `0${now_second}` : now_second]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: content\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 9\n  }, this);\n}\n_s(AlarmHead, \"DXXJ3WfnsYnZf4MUF0jfx+h0gyE=\", false, function () {\n  return [useInterval];\n});\n_c = AlarmHead;\nexport default AlarmHead;\nvar _c;\n$RefreshReg$(_c, \"AlarmHead\");","map":{"version":3,"names":["React","useEffect","useState","useInterval","AlarmHead","props","date","Date","hour","getHours","minute","getMinutes","second","getSeconds","day","getDate","month","getMonth","year","getFullYear","now_hour","setHour","now_min","setMinute","now_second","setSecond","now_day","setDay","now_month","setMonth","now_year","setYear","swc","setSwc","ringHour","Number","ringMin","ringMemo","chkTimeHour","chkTimeMin","content","match","fetch","method","headers","body","JSON","stringify","over","then","res","json","window","alert"],"sources":["D:/PROJECTS/react-app/src/pages/AlarmHead.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport useInterval from '../hooks/useInterval.js';\r\n\r\nfunction AlarmHead(props) {\r\n\r\n    const date = new Date();\r\n    let hour = date.getHours();\r\n    let minute = date.getMinutes();\r\n    let second = date.getSeconds();\r\n    let day = date.getDate();\r\n    let month = date.getMonth();\r\n    let year = date.getFullYear();\r\n\r\n    const [now_hour, setHour] = useState(hour);\r\n    const [now_min, setMinute] = useState(minute);\r\n    const [now_second, setSecond] = useState(second);\r\n    const [now_day, setDay] = useState(day);\r\n    const [now_month, setMonth] = useState(month + 1);\r\n    const [now_year, setYear] = useState(year);\r\n    const [swc, setSwc] = useState(true);\r\n\r\n    const ringHour = props.ringHour === false ? props.ringHour : Number(props.ringHour);\r\n    const ringMin = props.ringMin === false ? props.ringMin : Number(props.ringMin);\r\n    const ringMemo = props.ringMemo;\r\n    let chkTimeHour = null;\r\n    let chkTimeMin = null;\r\n\r\n    let content = null;\r\n    if (now_min > ringMin) {\r\n        chkTimeHour = now_hour === 0 ? ringHour - (now_hour + 1) : ringHour - now_hour;\r\n        chkTimeMin = 60 + ringMin - now_min;\r\n        setSwc(true);\r\n        content = `다음 알람 : ${chkTimeHour}시간 ${chkTimeMin}분 후에 ${ringMemo}알람이 실행됩니다.`;\r\n    } else if (now_min < ringMin) {\r\n        chkTimeHour = ringHour - now_hour;\r\n        chkTimeMin = ringMin - now_min;\r\n        setSwc(true);\r\n        content = `다음 알람 : ${chkTimeHour}시간 ${chkTimeMin}분 후에 ${ringMemo}알람이 실행됩니다.`;\r\n    } else if (swc && now_hour === ringHour && now_min === ringMin) {\r\n        match();\r\n        setSwc(false);\r\n    } else {\r\n        content = \"울릴 알람이 없습니다. 알람을 설정해 주세요.\";\r\n    }\r\n    // } else if ((Number(ringHour) - now_hour) <= 1) { //설정한 시간과 현재시간이 같으면\r\n    //     chkTimeHour = 0;\r\n    //     chkTimeMin = Number(ringMin) - now_min;\r\n    //     content = `다음 알람 : ${chkTimeHour}시간 ${chkTimeMin}분 후에 ${ringMemo}알람이 실행됩니다.`;\r\n    // } else if ((Number(ringHour) - now_hour >= 1)) {\r\n    //     chkTimeHour = Number(ringHour) - now_hour;\r\n    //     // chkTimeMin = Number(ringMin) > now_min ? Number(ringMin) - now_min : now_min - Number(ringMin);\r\n    //     chkTimeMin = Number(ringMin) > now_min ? Number(ringMin) - now_min : 60 - now_min - Number(ringMin);\r\n\r\n    //     content = `다음 알람 : ${chkTimeHour}시간 ${chkTimeMin}분 후에 ${ringMemo}알람이 실행됩니다.`;\r\n\r\n    function match() {\r\n        fetch(`http://localhost:3001/alarm?memo=${ringMemo}`, {\r\n            method: 'PUT',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify(\r\n                {\r\n                    over: true\r\n                }\r\n            )\r\n        }).then((res) => { res.json() })\r\n            .then(() => {\r\n                window.alert(\"알람!!!\" + ringMemo);\r\n            })\r\n    }\r\n\r\n\r\n    useInterval(() => {\r\n        const date = new Date();\r\n        let hour = date.getHours();\r\n        let minute = date.getMinutes();\r\n        let second = date.getSeconds();\r\n        let day = date.getDate();\r\n        let month = date.getMonth();\r\n        let year = date.getFullYear();\r\n\r\n        setHour(hour);\r\n        setMinute(minute);\r\n        setSecond(second);\r\n        setDay(day);\r\n        setMonth(month + 1);\r\n        setYear(year);\r\n\r\n    }, 1000);\r\n\r\n    return (\r\n        <section id=\"alarmHead\">\r\n            <h1>ALARM</h1>\r\n            <h2>현재 시각 : {now_year}.{now_month}.{now_day} {now_hour < 10 ? `0${now_hour}` : now_hour}:{now_min < 10 ? `0${now_min}` : now_min}:{now_second < 10 ? `0${now_second}` : now_second}</h2>\r\n            <h2>{content}</h2>\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default AlarmHead"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}