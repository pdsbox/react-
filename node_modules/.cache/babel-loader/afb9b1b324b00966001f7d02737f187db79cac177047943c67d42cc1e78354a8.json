{"ast":null,"code":"var _jsxFileName = \"D:\\\\PROJECTS\\\\react-app\\\\src\\\\pages\\\\AlarmRead.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\nimport db from '../data/data.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction AlarmRead(props) {\n  _s();\n  // const [hour, setHour] = useState(props.hour);\n  // const [min, setMin] = useState(props.min);\n  // console.log(hour, min);\n\n  //삭제 버튼 이벤트\n  function delEvent(id) {\n    if (window.confirm(\"삭제하시겠습니까?\")) {\n      fetch(`http://localhost:3001/alarm/${id}`, {\n        method: \"DELETE\"\n      }).then(res => {\n        if (res.ok) {\n          alert(\"삭제되었습니다.\");\n        }\n      });\n    }\n  }\n\n  //숫자 정리하기 위한 코드\n  let alData = [];\n  for (let i = 0; i < db.alarm.length; i++) {\n    alData.push(db.alarm[i]);\n  }\n  //시간순으로 리스트 정렬\n  alData.sort((a, b) => {\n    return a.hour - b.hour;\n  });\n  alData.sort((a, b) => {\n    if (a.hour === b.hour) {\n      return a.min - b.min;\n    } else {\n      return 0;\n    }\n  });\n  let notOverList = [];\n  for (let i = 0; i < alData.length; i++) {\n    if (alData[i].over === false) {\n      notOverList.push(alData[i]);\n    }\n  }\n\n  // let notOver = [];\n  // let isOver = [];\n  // for (let i = 0; i < alData.length; i++) {\n  //     if (alData[i].over === false) {\n  //         notOver.push(\n  //             {\n  //                 \"id\": db.alarm[i].id,\n  //                 \"memo\": db.alarm[i].memo,\n  //                 \"hour\": (db.alarm[i].hour < 10 ? `0${db.alarm[i].hour}` : db.alarm[i].hour),\n  //                 \"min\": (db.alarm[i].min < 10 ? `0${db.alarm[i].min}` : db.alarm[i].min)\n  //             }\n  //         )\n  //     } else if (alData[i].over === true) {\n  //         isOver.push(\n  //             {\n  //                 \"id\": db.alarm[i].id,\n  //                 \"memo\": db.alarm[i].memo,\n  //                 \"hour\": (db.alarm[i].hour < 10 ? `0${db.alarm[i].hour}` : db.alarm[i].hour),\n  //                 \"min\": (db.alarm[i].min < 10 ? `0${db.alarm[i].min}` : db.alarm[i].min)\n  //             }\n  //         )\n  //     }\n  // }\n\n  useEffect(() => {\n    if (notOverList.length > 0) {\n      props.getRingData(notOverList[0].hour, notOverList[0].min, notOverList[0].memo, notOverList[0].id, notOverList[0].over);\n    } else {\n      props.getRingData(undefined, undefined, undefined, undefined, undefined);\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    id: \"mainRead\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      onClick: event => {\n        event.preventDefault();\n        props.goCreate();\n      },\n      children: \"Set\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mapData\",\n      children: alData.map(data =>\n      /*#__PURE__*/\n      //map에 쓰인 인자 data는 db.alarm이 됨. db.alarm의 갯수(length)만큼 생성.\n      _jsxDEV(\"div\", {\n        className: data.over ? 'overed' : '',\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          className: \"desc\",\n          children: data.memo\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [data.hour, \"\\uC2DC \", data.min, \"\\uBD84\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          onClick: event => {\n            event.preventDefault();\n            props.goData(data);\n            props.goUpdate();\n          },\n          children: \"UPDATE\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          onClick: event => {\n            event.preventDefault();\n            delEvent(data.id);\n          },\n          children: \"DELETE\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 25\n        }, this)]\n      }, data.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 9\n  }, this);\n}\n_s(AlarmRead, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = AlarmRead;\nexport default AlarmRead;\nvar _c;\n$RefreshReg$(_c, \"AlarmRead\");","map":{"version":3,"names":["React","useEffect","db","AlarmRead","props","delEvent","id","window","confirm","fetch","method","then","res","ok","alert","alData","i","alarm","length","push","sort","a","b","hour","min","notOverList","over","getRingData","memo","undefined","event","preventDefault","goCreate","map","data","goData","goUpdate"],"sources":["D:/PROJECTS/react-app/src/pages/AlarmRead.js"],"sourcesContent":["import React, { useEffect } from 'react';\r\nimport db from '../data/data.json';\r\n\r\nfunction AlarmRead(props) {\r\n    // const [hour, setHour] = useState(props.hour);\r\n    // const [min, setMin] = useState(props.min);\r\n    // console.log(hour, min);\r\n\r\n    //삭제 버튼 이벤트\r\n    function delEvent(id) {\r\n        if (window.confirm(\"삭제하시겠습니까?\")) {\r\n            fetch(`http://localhost:3001/alarm/${id}`, {\r\n                method: \"DELETE\",\r\n            })\r\n                .then((res) => {\r\n                    if (res.ok) {\r\n                        alert(\"삭제되었습니다.\")\r\n                    }\r\n                })\r\n        }\r\n    }\r\n\r\n    //숫자 정리하기 위한 코드\r\n    let alData = [];\r\n    for (let i = 0; i < db.alarm.length; i++) {\r\n        alData.push(db.alarm[i]);\r\n    }\r\n    //시간순으로 리스트 정렬\r\n    alData.sort((a, b) => {\r\n        return a.hour - b.hour;\r\n    });\r\n    alData.sort((a, b) => {\r\n        if (a.hour === b.hour) {\r\n            return a.min - b.min;\r\n        } else {\r\n            return 0;\r\n        }\r\n    });\r\n    let notOverList = [];\r\n    for (let i = 0; i < alData.length; i++) {\r\n        if (alData[i].over === false) {\r\n            notOverList.push(alData[i]);\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n    // let notOver = [];\r\n    // let isOver = [];\r\n    // for (let i = 0; i < alData.length; i++) {\r\n    //     if (alData[i].over === false) {\r\n    //         notOver.push(\r\n    //             {\r\n    //                 \"id\": db.alarm[i].id,\r\n    //                 \"memo\": db.alarm[i].memo,\r\n    //                 \"hour\": (db.alarm[i].hour < 10 ? `0${db.alarm[i].hour}` : db.alarm[i].hour),\r\n    //                 \"min\": (db.alarm[i].min < 10 ? `0${db.alarm[i].min}` : db.alarm[i].min)\r\n    //             }\r\n    //         )\r\n    //     } else if (alData[i].over === true) {\r\n    //         isOver.push(\r\n    //             {\r\n    //                 \"id\": db.alarm[i].id,\r\n    //                 \"memo\": db.alarm[i].memo,\r\n    //                 \"hour\": (db.alarm[i].hour < 10 ? `0${db.alarm[i].hour}` : db.alarm[i].hour),\r\n    //                 \"min\": (db.alarm[i].min < 10 ? `0${db.alarm[i].min}` : db.alarm[i].min)\r\n    //             }\r\n    //         )\r\n    //     }\r\n    // }\r\n\r\n    useEffect(() => {\r\n        if (notOverList.length > 0) {\r\n            props.getRingData(notOverList[0].hour, notOverList[0].min, notOverList[0].memo, notOverList[0].id, notOverList[0].over);\r\n        } else {\r\n            props.getRingData(undefined, undefined, undefined, undefined, undefined);\r\n        }\r\n    },)\r\n\r\n    return (\r\n        <section id=\"mainRead\">\r\n            <button type=\"button\" onClick={(event) => {\r\n                event.preventDefault();\r\n                props.goCreate();\r\n            }}>Set</button>\r\n\r\n            <div className=\"mapData\">\r\n                {alData.map((data) => ( //map에 쓰인 인자 data는 db.alarm이 됨. db.alarm의 갯수(length)만큼 생성.\r\n                    <div key={data.id} className={data.over ? 'overed' : ''}>\r\n                        <strong className=\"desc\">{data.memo}</strong>\r\n                        <span>{data.hour}시 {data.min}분</span>\r\n                        <button type=\"button\" onClick={(event) => {\r\n                            event.preventDefault();\r\n                            props.goData(data);\r\n                            props.goUpdate();\r\n                        }}>UPDATE</button>\r\n                        <button type=\"button\" onClick={(event) => {\r\n                            event.preventDefault();\r\n                            delEvent(data.id);\r\n                        }}\r\n                        >DELETE</button>\r\n                    </div>\r\n                ))}\r\n            </div>\r\n        </section >\r\n    )\r\n}\r\n\r\nexport default AlarmRead"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}