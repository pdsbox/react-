{"ast":null,"code":"import React,{useEffect}from'react';import db from'../data/data.json';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function AlarmRead(props){// const [hour, setHour] = useState(props.hour);\n// const [min, setMin] = useState(props.min);\n// console.log(hour, min);\n//알람 항목들 상태 조회\nuseEffect(function(){dataSet();},[]);//알람 상태 현재시간에 맞춰서 최신화\nfunction dataSet(){var date=new Date();var dateHour=date.getHours();var dateMin=date.getMinutes();for(var i=0;i<db.alarm.length;i++){if(Number(db.alarm[i].hour)>dateHour){fetchingOver(i+1,false);}else if(Number(db.alarm[i].hour)<dateHour){fetchingOver(i+1,true);}else if(Number(db.alarm[i].hour)===dateHour){if(Number(db.alarm[i].min)>dateMin){fetchingOver(i+1,false);}else if(Number(db.alarm[i].min)<dateMin){fetchingOver(i+1,true);}else{fetchingOver(i+1,true);}}}}//리스트 상태 변경 액션\nfunction fetchingOver(id,status){fetch(\"http://localhost:3001/alarm/\".concat(id),{method:\"PATCH\",headers:{\"Content-Type\":\"application/json\"},body:JSON.stringify({over:status})});}//삭제 버튼 이벤트\nfunction delEvent(id){if(window.confirm(\"삭제하시겠습니까?\")){fetch(\"http://localhost:3001/alarm/\".concat(id),{method:\"DELETE\"}).then(function(res){if(res.ok){alert(\"삭제되었습니다.\");}});}}//숫자 정리하기 위한 코드\nvar alData=[];for(var i=0;i<db.alarm.length;i++){alData.push(db.alarm[i]);}//시간순으로 리스트 정렬\nalData.sort(function(a,b){return a.hour-b.hour;});alData.sort(function(a,b){if(a.hour===b.hour){return a.min-b.min;}else{return 0;}});var notOverList=[];for(var _i=0;_i<alData.length;_i++){if(alData[_i].over===false){notOverList.push(alData[_i]);}}// let notOver = [];\n// let isOver = [];\n// for (let i = 0; i < alData.length; i++) {\n//     if (alData[i].over === false) {\n//         notOver.push(\n//             {\n//                 \"id\": db.alarm[i].id,\n//                 \"memo\": db.alarm[i].memo,\n//                 \"hour\": (db.alarm[i].hour < 10 ? `0${db.alarm[i].hour}` : db.alarm[i].hour),\n//                 \"min\": (db.alarm[i].min < 10 ? `0${db.alarm[i].min}` : db.alarm[i].min)\n//             }\n//         )\n//     } else if (alData[i].over === true) {\n//         isOver.push(\n//             {\n//                 \"id\": db.alarm[i].id,\n//                 \"memo\": db.alarm[i].memo,\n//                 \"hour\": (db.alarm[i].hour < 10 ? `0${db.alarm[i].hour}` : db.alarm[i].hour),\n//                 \"min\": (db.alarm[i].min < 10 ? `0${db.alarm[i].min}` : db.alarm[i].min)\n//             }\n//         )\n//     }\n// }\nuseEffect(function(){if(notOverList.length>0){props.getRingData(notOverList[0].hour,notOverList[0].min,notOverList[0].memo,notOverList[0].id,notOverList[0].over);}else{props.getRingData(undefined,undefined,undefined,undefined,undefined);}});return/*#__PURE__*/_jsxs(\"section\",{id:\"alarmRead\",children:[/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsx(\"button\",{type:\"button\",onClick:function onClick(event){event.preventDefault();props.goCreate();},children:\"+ADD\"})}),/*#__PURE__*/_jsx(\"div\",{className:\"alarmReadMapContainer\",children:alData.map(function(data){return/*#__PURE__*/ (//map에 쓰인 인자 data는 db.alarm이 됨. db.alarm의 갯수(length)만큼 생성.\n_jsxs(\"div\",{className:data.over?'overed alarmObject flex':'alarmObject flex',children:[/*#__PURE__*/_jsxs(\"div\",{className:\"titleAndTime\",children:[data.memo===''?'':/*#__PURE__*/_jsx(\"strong\",{children:data.memo}),/*#__PURE__*/_jsxs(\"span\",{children:[data.hour<10?\"0\".concat(data.hour):data.hour,\":\",data.min<10?\"0\".concat(data.min):data.min]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"buttonGroup\",children:[/*#__PURE__*/_jsx(\"button\",{type:\"button\",onClick:function onClick(event){event.preventDefault();props.goData(data);props.goUpdate();},children:\"EDIT\"}),/*#__PURE__*/_jsx(\"button\",{type:\"button\",onClick:function onClick(event){event.preventDefault();delEvent(data.id);},children:\"DELETE\"})]})]},data.id));})})]});}export default AlarmRead;","map":{"version":3,"names":["React","useEffect","db","AlarmRead","props","dataSet","date","Date","dateHour","getHours","dateMin","getMinutes","i","alarm","length","Number","hour","fetchingOver","min","id","status","fetch","method","headers","body","JSON","stringify","over","delEvent","window","confirm","then","res","ok","alert","alData","push","sort","a","b","notOverList","getRingData","memo","undefined","event","preventDefault","goCreate","map","data","goData","goUpdate"],"sources":["D:/PROJECTS/react-app/src/pages/AlarmRead.js"],"sourcesContent":["import React, { useEffect } from 'react';\r\nimport db from '../data/data.json';\r\n\r\nfunction AlarmRead(props) {\r\n    // const [hour, setHour] = useState(props.hour);\r\n    // const [min, setMin] = useState(props.min);\r\n    // console.log(hour, min);\r\n\r\n    //알람 항목들 상태 조회\r\n    useEffect(() => {\r\n        dataSet();\r\n    }, [])\r\n\r\n    //알람 상태 현재시간에 맞춰서 최신화\r\n    function dataSet() {\r\n        const date = new Date();\r\n        const dateHour = date.getHours();\r\n        const dateMin = date.getMinutes();\r\n        for (let i = 0; i < db.alarm.length; i++) {\r\n            if (Number(db.alarm[i].hour) > dateHour) {\r\n                fetchingOver(i + 1, false);\r\n\r\n            } else if (Number(db.alarm[i].hour) < dateHour) {\r\n                fetchingOver(i + 1, true);\r\n\r\n            } else if (Number(db.alarm[i].hour) === dateHour) {\r\n                if (Number(db.alarm[i].min) > dateMin) {\r\n                    fetchingOver(i + 1, false);\r\n\r\n                } else if (Number(db.alarm[i].min) < dateMin) {\r\n                    fetchingOver(i + 1, true);\r\n\r\n                } else {\r\n                    fetchingOver(i + 1, true);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n\r\n    //리스트 상태 변경 액션\r\n    function fetchingOver(id, status) {\r\n        fetch(`http://localhost:3001/alarm/${id}`, {\r\n            method: \"PATCH\",\r\n            headers: { \"Content-Type\": \"application/json\" },\r\n            body: JSON.stringify({\r\n                over: status\r\n            })\r\n        })\r\n    }\r\n\r\n\r\n    //삭제 버튼 이벤트\r\n    function delEvent(id) {\r\n        if (window.confirm(\"삭제하시겠습니까?\")) {\r\n            fetch(`http://localhost:3001/alarm/${id}`, {\r\n                method: \"DELETE\",\r\n            })\r\n                .then((res) => {\r\n                    if (res.ok) {\r\n                        alert(\"삭제되었습니다.\")\r\n                    }\r\n                })\r\n        }\r\n    }\r\n\r\n    //숫자 정리하기 위한 코드\r\n    let alData = [];\r\n    for (let i = 0; i < db.alarm.length; i++) {\r\n        alData.push(db.alarm[i]);\r\n    }\r\n    //시간순으로 리스트 정렬\r\n    alData.sort((a, b) => {\r\n        return a.hour - b.hour;\r\n    });\r\n    alData.sort((a, b) => {\r\n        if (a.hour === b.hour) {\r\n            return a.min - b.min;\r\n        } else {\r\n            return 0;\r\n        }\r\n    });\r\n    let notOverList = [];\r\n    for (let i = 0; i < alData.length; i++) {\r\n        if (alData[i].over === false) {\r\n            notOverList.push(alData[i]);\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n    // let notOver = [];\r\n    // let isOver = [];\r\n    // for (let i = 0; i < alData.length; i++) {\r\n    //     if (alData[i].over === false) {\r\n    //         notOver.push(\r\n    //             {\r\n    //                 \"id\": db.alarm[i].id,\r\n    //                 \"memo\": db.alarm[i].memo,\r\n    //                 \"hour\": (db.alarm[i].hour < 10 ? `0${db.alarm[i].hour}` : db.alarm[i].hour),\r\n    //                 \"min\": (db.alarm[i].min < 10 ? `0${db.alarm[i].min}` : db.alarm[i].min)\r\n    //             }\r\n    //         )\r\n    //     } else if (alData[i].over === true) {\r\n    //         isOver.push(\r\n    //             {\r\n    //                 \"id\": db.alarm[i].id,\r\n    //                 \"memo\": db.alarm[i].memo,\r\n    //                 \"hour\": (db.alarm[i].hour < 10 ? `0${db.alarm[i].hour}` : db.alarm[i].hour),\r\n    //                 \"min\": (db.alarm[i].min < 10 ? `0${db.alarm[i].min}` : db.alarm[i].min)\r\n    //             }\r\n    //         )\r\n    //     }\r\n    // }\r\n\r\n    useEffect(() => {\r\n        if (notOverList.length > 0) {\r\n            props.getRingData(notOverList[0].hour, notOverList[0].min, notOverList[0].memo, notOverList[0].id, notOverList[0].over);\r\n        } else {\r\n            props.getRingData(undefined, undefined, undefined, undefined, undefined);\r\n        }\r\n    },)\r\n\r\n    return (\r\n        <section id=\"alarmRead\">\r\n            <div>\r\n                <button type=\"button\" onClick={(event) => {\r\n                    event.preventDefault();\r\n                    props.goCreate();\r\n                }}>+ADD</button>\r\n            </div>\r\n\r\n            <div className=\"alarmReadMapContainer\">\r\n                {alData.map((data) => ( //map에 쓰인 인자 data는 db.alarm이 됨. db.alarm의 갯수(length)만큼 생성.\r\n                    <div key={data.id} className={data.over ? 'overed alarmObject flex' : 'alarmObject flex'}>\r\n                        <div className='titleAndTime'>\r\n                            {data.memo === '' ? '' : <strong>{data.memo}</strong>}\r\n                            <span>{data.hour < 10 ? `0${data.hour}` : data.hour}:{data.min < 10 ? `0${data.min}` : data.min}</span>\r\n                        </div>\r\n                        <div className='buttonGroup'>\r\n                            <button type=\"button\" onClick={(event) => {\r\n                                event.preventDefault();\r\n                                props.goData(data);\r\n                                props.goUpdate();\r\n                            }}>EDIT</button>\r\n                            <button type=\"button\" onClick={(event) => {\r\n                                event.preventDefault();\r\n                                delEvent(data.id);\r\n                            }}\r\n                            >DELETE</button>\r\n                        </div>\r\n                    </div>\r\n                ))}\r\n            </div>\r\n        </section >\r\n    )\r\n}\r\n\r\nexport default AlarmRead"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}