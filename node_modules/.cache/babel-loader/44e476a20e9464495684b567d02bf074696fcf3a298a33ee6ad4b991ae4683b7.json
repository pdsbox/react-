{"ast":null,"code":"var _jsxFileName = \"D:\\\\PROJECTS\\\\react-app\\\\src\\\\pages\\\\Alarm.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport db from '../data/data.json';\nimport useInterval from '../hooks/useInterval';\nimport Nav from './Nav';\nimport AlarmHead from './AlarmHead';\nimport AlarmRead from './AlarmRead';\nimport AlarmCreate from './AlarmCreate';\nimport AlarmUpdate from './AlarmUpdate';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Alarm() {\n  _s();\n  //현재시간 세팅\n  const [nowTimeHour, setNowTimeHour] = useState(undefined);\n  const [nowTimeMin, setNowTimeMin] = useState(undefined);\n  const [match, setMatch] = useState(true);\n  const [swc, setSwc] = useState(true);\n\n  //알람 울릴 시간 세팅\n  const [ringTimeHour, setRingTimeHour] = useState(null);\n  const [ringTimeMin, setRingTimeMin] = useState(null);\n  const [ringMemo, setRingMemo] = useState(null);\n\n  //AlarmHead컴포넌트로부터 현재시간 받아오기\n  function getNowTime(hour, min) {\n    setNowTimeHour(Number(hour));\n    setNowTimeMin(Number(min));\n  }\n\n  //Read컴포넌트로부터 첫번째 리스트 시간정보 받아오기\n  function getRingTime(hour, min, memo) {\n    setRingTimeHour(Number(hour));\n    setRingTimeMin(Number(min));\n    setRingMemo(memo);\n  }\n  function timeMatch() {\n    if (swc && match && nowTimeHour === ringTimeHour && nowTimeMin === ringTimeMin) {\n      window.alert(\"알람알람 울렸어요 : \" + ringMemo);\n      setSwc(false);\n    } else if (nowTimeHour !== ringTimeHour || nowTimeMin !== ringTimeMin) {\n      setMatch(false);\n      setSwc(true);\n    } else if (swc && nowTimeHour === ringTimeHour) {\n      setMatch(true);\n    }\n  }\n  useInterval(() => {\n    timeMatch();\n  }, 1000);\n\n  //CRUD모드 세팅\n  const [mode, setMode] = useState('READ');\n  const [getRead, setRead] = useState([]);\n  function goData(data) {\n    setRead(data);\n  }\n  let content = null;\n  if (mode === 'READ') {\n    content = /*#__PURE__*/_jsxDEV(AlarmRead, {\n      goCreate: () => {\n        setMode('CREATE');\n      },\n      goUpdate: () => {\n        setMode(\"UPDATE\");\n      },\n      goData: fromRead => {\n        goData(fromRead);\n      },\n      getRingTime: (hour, min, memo) => {\n        getRingTime(hour, min, memo);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }, this);\n  } else if (mode === 'CREATE') {\n    content = /*#__PURE__*/_jsxDEV(AlarmCreate, {\n      goRead: () => {\n        setMode(\"READ\");\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }, this);\n  } else if (mode === 'UPDATE') {\n    content = /*#__PURE__*/_jsxDEV(AlarmUpdate, {\n      upData: getRead,\n      goRead: () => {\n        setMode(\"READ\");\n      },\n      onUpdate: () => {\n        setMode('READ');\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Nav, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"article\", {\n      className: \"contents\",\n      children: [/*#__PURE__*/_jsxDEV(AlarmHead, {\n        match: () => {\n          timeMatch();\n        },\n        getTime: (hour, min) => {\n          getNowTime(hour, min);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 5\n      }, this), content]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true);\n}\n_s(Alarm, \"7R2rndtM3SeMpLlHTGVsQP2/4xM=\", false, function () {\n  return [useInterval];\n});\n_c = Alarm;\nexport default Alarm;\nvar _c;\n$RefreshReg$(_c, \"Alarm\");","map":{"version":3,"names":["React","useEffect","useState","db","useInterval","Nav","AlarmHead","AlarmRead","AlarmCreate","AlarmUpdate","Alarm","nowTimeHour","setNowTimeHour","undefined","nowTimeMin","setNowTimeMin","match","setMatch","swc","setSwc","ringTimeHour","setRingTimeHour","ringTimeMin","setRingTimeMin","ringMemo","setRingMemo","getNowTime","hour","min","Number","getRingTime","memo","timeMatch","window","alert","mode","setMode","getRead","setRead","goData","data","content","fromRead"],"sources":["D:/PROJECTS/react-app/src/pages/Alarm.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport db from '../data/data.json';\r\nimport useInterval from '../hooks/useInterval';\r\n\r\nimport Nav from './Nav';\r\nimport AlarmHead from './AlarmHead';\r\nimport AlarmRead from './AlarmRead';\r\nimport AlarmCreate from './AlarmCreate';\r\nimport AlarmUpdate from './AlarmUpdate';\r\n\r\nfunction Alarm() {\r\n\t//현재시간 세팅\r\n\tconst [nowTimeHour, setNowTimeHour] = useState(undefined);\r\n\tconst [nowTimeMin, setNowTimeMin] = useState(undefined);\r\n\tconst [match, setMatch] = useState(true);\r\n\tconst [swc, setSwc] = useState(true);\r\n\r\n\r\n\t//알람 울릴 시간 세팅\r\n\tconst [ringTimeHour, setRingTimeHour] = useState(null);\r\n\tconst [ringTimeMin, setRingTimeMin] = useState(null);\r\n\tconst [ringMemo, setRingMemo] = useState(null);\r\n\r\n\t//AlarmHead컴포넌트로부터 현재시간 받아오기\r\n\tfunction getNowTime(hour, min) {\r\n\t\tsetNowTimeHour(Number(hour));\r\n\t\tsetNowTimeMin(Number(min));\r\n\t}\r\n\r\n\t//Read컴포넌트로부터 첫번째 리스트 시간정보 받아오기\r\n\tfunction getRingTime(hour, min, memo) {\r\n\t\tsetRingTimeHour(Number(hour));\r\n\t\tsetRingTimeMin(Number(min));\r\n\t\tsetRingMemo(memo);\r\n\t}\r\n\r\n\r\n\tfunction timeMatch() {\r\n\t\tif (swc && match && nowTimeHour === ringTimeHour && nowTimeMin === ringTimeMin) {\r\n\t\t\twindow.alert(\"알람알람 울렸어요 : \" + ringMemo);\r\n\t\t\tsetSwc(false);\r\n\t\t} else if (nowTimeHour !== ringTimeHour || nowTimeMin !== ringTimeMin) {\r\n\t\t\tsetMatch(false);\r\n\t\t\tsetSwc(true);\r\n\t\t} else if (swc && nowTimeHour === ringTimeHour) {\r\n\t\t\tsetMatch(true);\r\n\t\t}\r\n\t}\r\n\r\n\tuseInterval(() => {\r\n\t\ttimeMatch();\r\n\t}, 1000)\r\n\r\n\r\n\r\n\t//CRUD모드 세팅\r\n\tconst [mode, setMode] = useState('READ');\r\n\tconst [getRead, setRead] = useState([]);\r\n\tfunction goData(data) {\r\n\t\tsetRead(data);\r\n\t}\r\n\tlet content = null;\r\n\r\n\tif (mode === 'READ') {\r\n\t\tcontent = <AlarmRead goCreate={() => { setMode('CREATE') }}\r\n\t\t\tgoUpdate={() => { setMode(\"UPDATE\"); }}\r\n\t\t\tgoData={(fromRead) => { goData(fromRead); }}\r\n\t\t\tgetRingTime={(hour, min, memo) => { getRingTime(hour, min, memo) }}\r\n\t\t/>\r\n\t}\r\n\telse if (mode === 'CREATE') {\r\n\t\tcontent = <AlarmCreate goRead={() => { setMode(\"READ\"); }} />\r\n\t}\r\n\telse if (mode === 'UPDATE') {\r\n\t\tcontent = <AlarmUpdate upData={getRead} goRead={() => { setMode(\"READ\") }} onUpdate={() => { setMode('READ') }} />\r\n\t}\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<Nav></Nav>\r\n\t\t\t<article className=\"contents\">\r\n\t\t\t\t<AlarmHead match={() => { timeMatch() }} getTime={(hour, min) => { getNowTime(hour, min) }} />\r\n\t\t\t\t{content}\r\n\t\t\t</article>\r\n\t\t</>\r\n\t)\r\n}\r\n\r\nexport default Alarm"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}