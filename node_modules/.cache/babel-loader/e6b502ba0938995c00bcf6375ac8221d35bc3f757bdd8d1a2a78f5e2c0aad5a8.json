{"ast":null,"code":"var _jsxFileName = \"D:\\\\PROJECTS\\\\react-app\\\\src\\\\pages\\\\AlarmHead.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport useInterval from '../hooks/useInterval.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction AlarmHead(props) {\n  _s();\n  console.log(\"props\", props);\n  const date = new Date();\n  let hour = date.getHours();\n  let minute = date.getMinutes();\n  let second = date.getSeconds();\n  let day = date.getDate();\n  let month = date.getMonth();\n  let year = date.getFullYear();\n  const [now_hour, setHour] = useState(hour);\n  const [now_min, setMinute] = useState(minute);\n  const [now_second, setSecond] = useState(second);\n  const [now_day, setDay] = useState(day);\n  const [now_month, setMonth] = useState(month + 1);\n  const [now_year, setYear] = useState(year);\n  const ringHour = props.ringHour === undefined ? props.ringHour : Number(props.ringHour);\n  const ringMin = props.ringMin === undefined ? props.ringMin : Number(props.ringMin);\n  const ringMemo = props.ringMemo;\n  const ringId = props.ringId;\n  const isOver = Boolean(props.ringOver);\n  const [swc, setSwc] = useState({\n    isOver\n  });\n  let chkTimeHour = null;\n  let chkTimeMin = null;\n  console.log(swc, !swc, props.ringOver);\n  let content = null;\n  //타임 체크\n  if (ringHour === undefined && ringMin === undefined) {\n    content = \"울릴 알람이 없습니다. 알람을 설정해 주세요.\";\n  } else if (now_min > ringMin) {\n    chkTimeHour = now_hour === 0 ? ringHour - (now_hour + 1) : ringHour - now_hour;\n    chkTimeMin = 60 + ringMin - now_min;\n    content = `다음 알람 : ${chkTimeHour}시간 ${chkTimeMin}분 후에 ${ringMemo}알람이 실행됩니다.`;\n  } else if (now_min < ringMin) {\n    chkTimeHour = ringHour - now_hour;\n    chkTimeMin = ringMin - now_min;\n    content = `다음 알람 : ${chkTimeHour}시간 ${chkTimeMin}분 후에 ${ringMemo}알람이 실행됩니다.`;\n  } else if (swc === false && ringHour === now_hour && ringMin === now_min) {\n    match();\n    setSwc(!swc);\n  } else {\n    content = \"울릴 알람이 없습니다. 알람을 설정해 주세요.\";\n  }\n  // setSwc(props.ringOver);\n\n  // } else if ((Number(ringHour) - now_hour) <= 1) { //설정한 시간과 현재시간이 같으면\n  //     chkTimeHour = 0;\n  //     chkTimeMin = Number(ringMin) - now_min;\n  //     content = `다음 알람 : ${chkTimeHour}시간 ${chkTimeMin}분 후에 ${ringMemo}알람이 실행됩니다.`;\n  // } else if ((Number(ringHour) - now_hour >= 1)) {\n  //     chkTimeHour = Number(ringHour) - now_hour;\n  //     // chkTimeMin = Number(ringMin) > now_min ? Number(ringMin) - now_min : now_min - Number(ringMin);\n  //     chkTimeMin = Number(ringMin) > now_min ? Number(ringMin) - now_min : 60 - now_min - Number(ringMin);\n\n  //     content = `다음 알람 : ${chkTimeHour}시간 ${chkTimeMin}분 후에 ${ringMemo}알람이 실행됩니다.`;\n\n  function match() {\n    //패치 404 에러\n    fetch(`http://localhost:3001/alarm/${ringId}`, {\n      method: \"PATCH\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        over: true\n      })\n    }).then(res => {\n      if (res.ok) {\n        window.alert(\"알람 발생!\");\n      }\n    }).catch(() => {\n      window.alert(\"네트워크 오류가 발생했습니다. 확인 후 다시 시도해주십시오.\");\n    });\n\n    // fetch(`http://localhost:3001/alarm?hour=${ringHour}&min=${ringMin}`, {\n    //     method: \"PUT\",\n    // }).then((res) => { console.log(\"알람\", res, ringMemo); })\n  }\n\n  useInterval(() => {\n    const date = new Date();\n    let hour = date.getHours();\n    let minute = date.getMinutes();\n    let second = date.getSeconds();\n    let day = date.getDate();\n    let month = date.getMonth();\n    let year = date.getFullYear();\n    setHour(hour);\n    setMinute(minute);\n    setSecond(second);\n    setDay(day);\n    setMonth(month + 1);\n    setYear(year);\n  }, 1000);\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    id: \"alarmHead\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"ALARM\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"\\uD604\\uC7AC \\uC2DC\\uAC01 : \", now_year, \".\", now_month, \".\", now_day, \" \", now_hour < 10 ? `0${now_hour}` : now_hour, \":\", now_min < 10 ? `0${now_min}` : now_min, \":\", now_second < 10 ? `0${now_second}` : now_second]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: content\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 9\n  }, this);\n}\n_s(AlarmHead, \"wm6PTKSalQpYh977Nxex0AyoQEA=\", false, function () {\n  return [useInterval];\n});\n_c = AlarmHead;\nexport default AlarmHead;\nvar _c;\n$RefreshReg$(_c, \"AlarmHead\");","map":{"version":3,"names":["React","useState","useInterval","AlarmHead","props","console","log","date","Date","hour","getHours","minute","getMinutes","second","getSeconds","day","getDate","month","getMonth","year","getFullYear","now_hour","setHour","now_min","setMinute","now_second","setSecond","now_day","setDay","now_month","setMonth","now_year","setYear","ringHour","undefined","Number","ringMin","ringMemo","ringId","isOver","Boolean","ringOver","swc","setSwc","chkTimeHour","chkTimeMin","content","match","fetch","method","headers","body","JSON","stringify","over","then","res","ok","window","alert","catch"],"sources":["D:/PROJECTS/react-app/src/pages/AlarmHead.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport useInterval from '../hooks/useInterval.js';\r\n\r\nfunction AlarmHead(props) {\r\n    console.log(\"props\", props);\r\n\r\n    const date = new Date();\r\n    let hour = date.getHours();\r\n    let minute = date.getMinutes();\r\n    let second = date.getSeconds();\r\n    let day = date.getDate();\r\n    let month = date.getMonth();\r\n    let year = date.getFullYear();\r\n\r\n    const [now_hour, setHour] = useState(hour);\r\n    const [now_min, setMinute] = useState(minute);\r\n    const [now_second, setSecond] = useState(second);\r\n    const [now_day, setDay] = useState(day);\r\n    const [now_month, setMonth] = useState(month + 1);\r\n    const [now_year, setYear] = useState(year);\r\n\r\n    const ringHour = props.ringHour === undefined ? props.ringHour : Number(props.ringHour);\r\n    const ringMin = props.ringMin === undefined ? props.ringMin : Number(props.ringMin);\r\n    const ringMemo = props.ringMemo;\r\n    const ringId = props.ringId;\r\n    const isOver = Boolean(props.ringOver);\r\n    const [swc, setSwc] = useState({ isOver });\r\n    let chkTimeHour = null;\r\n    let chkTimeMin = null;\r\n    console.log(swc, !swc, props.ringOver);\r\n\r\n    let content = null;\r\n    //타임 체크\r\n    if (ringHour === undefined && ringMin === undefined) {\r\n        content = \"울릴 알람이 없습니다. 알람을 설정해 주세요.\";\r\n    }\r\n    else if (now_min > ringMin) {\r\n        chkTimeHour = now_hour === 0 ? ringHour - (now_hour + 1) : ringHour - now_hour;\r\n        chkTimeMin = 60 + ringMin - now_min;\r\n        content = `다음 알람 : ${chkTimeHour}시간 ${chkTimeMin}분 후에 ${ringMemo}알람이 실행됩니다.`;\r\n    } else if (now_min < ringMin) {\r\n        chkTimeHour = ringHour - now_hour;\r\n        chkTimeMin = ringMin - now_min;\r\n        content = `다음 알람 : ${chkTimeHour}시간 ${chkTimeMin}분 후에 ${ringMemo}알람이 실행됩니다.`;\r\n    } else if (swc === false && ringHour === now_hour && ringMin === now_min) {\r\n        match();\r\n        setSwc(!swc);\r\n    } else {\r\n        content = \"울릴 알람이 없습니다. 알람을 설정해 주세요.\";\r\n    }\r\n    // setSwc(props.ringOver);\r\n\r\n    // } else if ((Number(ringHour) - now_hour) <= 1) { //설정한 시간과 현재시간이 같으면\r\n    //     chkTimeHour = 0;\r\n    //     chkTimeMin = Number(ringMin) - now_min;\r\n    //     content = `다음 알람 : ${chkTimeHour}시간 ${chkTimeMin}분 후에 ${ringMemo}알람이 실행됩니다.`;\r\n    // } else if ((Number(ringHour) - now_hour >= 1)) {\r\n    //     chkTimeHour = Number(ringHour) - now_hour;\r\n    //     // chkTimeMin = Number(ringMin) > now_min ? Number(ringMin) - now_min : now_min - Number(ringMin);\r\n    //     chkTimeMin = Number(ringMin) > now_min ? Number(ringMin) - now_min : 60 - now_min - Number(ringMin);\r\n\r\n    //     content = `다음 알람 : ${chkTimeHour}시간 ${chkTimeMin}분 후에 ${ringMemo}알람이 실행됩니다.`;\r\n\r\n    function match() {\r\n        //패치 404 에러\r\n        fetch(`http://localhost:3001/alarm/${ringId}`, {\r\n            method: \"PATCH\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n            },\r\n            body: JSON.stringify({\r\n                over: true\r\n            }),\r\n        }).then((res) => { if (res.ok) { window.alert(\"알람 발생!\"); } })\r\n            .catch(() => { window.alert(\"네트워크 오류가 발생했습니다. 확인 후 다시 시도해주십시오.\"); })\r\n\r\n        // fetch(`http://localhost:3001/alarm?hour=${ringHour}&min=${ringMin}`, {\r\n        //     method: \"PUT\",\r\n        // }).then((res) => { console.log(\"알람\", res, ringMemo); })\r\n    }\r\n\r\n\r\n    useInterval(() => {\r\n        const date = new Date();\r\n        let hour = date.getHours();\r\n        let minute = date.getMinutes();\r\n        let second = date.getSeconds();\r\n        let day = date.getDate();\r\n        let month = date.getMonth();\r\n        let year = date.getFullYear();\r\n\r\n        setHour(hour);\r\n        setMinute(minute);\r\n        setSecond(second);\r\n        setDay(day);\r\n        setMonth(month + 1);\r\n        setYear(year);\r\n\r\n    }, 1000);\r\n\r\n    return (\r\n        <section id=\"alarmHead\">\r\n            <h1>ALARM</h1>\r\n            <h2>현재 시각 : {now_year}.{now_month}.{now_day} {now_hour < 10 ? `0${now_hour}` : now_hour}:{now_min < 10 ? `0${now_min}` : now_min}:{now_second < 10 ? `0${now_second}` : now_second}</h2>\r\n            <h2>{content}</h2>\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default AlarmHead"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}